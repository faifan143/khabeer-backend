version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: khabeer-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-khabeer}
      POSTGRES_USER: ${POSTGRES_USER:-khabeer_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-khabeer_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - '5432:5432'
    networks:
      - khabeer-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-khabeer_user} -d ${POSTGRES_DB:-khabeer}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: khabeer-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - khabeer-network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # NestJS Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: khabeer-app
    restart: unless-stopped
    environment:
      # Database Configuration
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3000}
      DATABASE_URL: postgresql://${POSTGRES_USER:-khabeer_user}:${POSTGRES_PASSWORD:-khabeer_password}@postgres:5432/${POSTGRES_DB:-khabeer}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379

      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}

      # CORS Configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-*}

      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}

      # Security
      HELMET_CONTENT_SECURITY_POLICY_ENABLED: ${HELMET_CONTENT_SECURITY_POLICY_ENABLED:-true}

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-debug}

      # App Configuration
      APP_VERSION: ${APP_VERSION:-1.0.0}
      APP_URL: ${APP_URL:-http://localhost:3001}

      # OTP Configuration - Set to 'false' to bypass OTP verification
      ENABLE_OTP: ${ENABLE_OTP:-false}

      # SMS Configuration (for when OTP is enabled)
      TAMIMAH_SMS_API_URL: ${TAMIMAH_SMS_API_URL}
      TAMIMAH_SMS_USERNAME: ${TAMIMAH_SMS_USERNAME}
      TAMIMAH_SMS_PASSWORD: ${TAMIMAH_SMS_PASSWORD}
      TAMIMAH_SMS_SENDER_ID: ${TAMIMAH_SMS_SENDER_ID:-Khabeerw}

      # Firebase Service Account
      FIREBASE_SERVICE_ACCOUNT: ${FIREBASE_SERVICE_ACCOUNT}
    ports:
      - '${PORT:-3000}:3000'
    volumes:
      - ./uploads:/app/uploads:rw
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - khabeer-network
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: khabeer-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - khabeer-network
    profiles:
      - with-nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  khabeer-network:
    driver: bridge
