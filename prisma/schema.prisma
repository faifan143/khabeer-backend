// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int      @id @default(autoincrement())
  image     String
  titleAr   String
  titleEn   String
  state     String
  services  Service[]
}

model Service {
  id          Int      @id @default(autoincrement())
  image       String
  title       String
  description String
  commission  Float
  whatsapp    String
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  providerServices ProviderService[]
  offers      Offer[]
  orders      Order[]
}

model Provider {
  id                Int      @id @default(autoincrement())
  name              String
  email             String?  @unique
  password          String?  // Added password field for authentication
  image             String
  description       String
  state             String
  phone             String
  isActive          Boolean  @default(false)
  isVerified        Boolean  @default(false)
  location          Json?    // GPS coordinates {lat: number, lng: number}
  officialDocuments String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  providerServices  ProviderService[]
  orders            Order[]
  joinRequests      ProviderJoinRequest[]
  offers            Offer[]
  ratings           ProviderRating[]
  verification      ProviderVerification?
  locationTracking  LocationTracking[]
}

model User {
  id                Int      @id @default(autoincrement())
  name              String
  email             String   @unique
  password          String
  role              String   @default("USER")
  image             String
  address           String
  phone             String
  state             String
  isActive          Boolean  @default(false)
  officialDocuments String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  orders            Order[]
  ratings           ProviderRating[]
}

model Order {
  id                Int      @id @default(autoincrement())
  bookingId         String   @unique @default(cuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  provider          Provider @relation(fields: [providerId], references: [id])
  providerId        Int
  service           Service  @relation(fields: [serviceId], references: [id])
  serviceId         Int
  status            String   @default("pending") // pending, accepted, in_progress, completed, cancelled
  orderDate         DateTime @default(now())
  scheduledDate     DateTime?
  location          String?  // Home, Work, Other
  locationDetails   String?
  providerLocation  Json?    // GPS coordinates when order accepted
  quantity          Int      @default(1)
  totalAmount       Float
  providerAmount    Float
  commissionAmount  Float
  invoice           Invoice?
  locationTracking  LocationTracking[]
  activeConnections ActiveConnection[]
}

model Invoice {
  id           Int      @id @default(autoincrement())
  order        Order    @relation(fields: [orderId], references: [id])
  orderId      Int      @unique
  paymentDate  DateTime?
  totalAmount  Float
  discount     Float    @default(0)
  paymentStatus String  @default("pending") // pending, paid, failed, refunded
  paymentMethod String?
  isVerified   Boolean  @default(false) // Admin verification of payment
  verifiedBy   Int?     // Admin ID who verified the payment
  verifiedAt   DateTime? // When payment was verified
  payoutStatus String   @default("pending") // pending, paid, failed
  payoutDate   DateTime? // When provider was paid
}

model ProviderVerification {
  id          String   @id @default(cuid())
  providerId  Int      @unique
  status      String   @default("pending") // pending, approved, rejected
  documents   String[] // document URLs
  adminNotes  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  provider    Provider @relation(fields: [providerId], references: [id])
}

model ProviderJoinRequest {
  id           Int      @id @default(autoincrement())
  provider     Provider @relation(fields: [providerId], references: [id])
  providerId   Int
  requestDate  DateTime @default(now())
  status       String   @default("pending") // pending, approved, rejected
  adminNotes   String?
}

model ProviderService {
  id          Int      @id @default(autoincrement())
  provider    Provider @relation(fields: [providerId], references: [id])
  providerId  Int
  service     Service  @relation(fields: [serviceId], references: [id])
  serviceId   Int
  price       Float    @default(0)
  isActive    Boolean  @default(true)
}

model Offer {
  id          Int      @id @default(autoincrement())
  provider    Provider @relation(fields: [providerId], references: [id])
  providerId  Int
  service     Service  @relation(fields: [serviceId], references: [id])
  serviceId   Int
  startDate   DateTime
  endDate     DateTime
  originalPrice Float
  offerPrice   Float
  description String
  isActive    Boolean  @default(true)
}

model ProviderRating {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  provider    Provider @relation(fields: [providerId], references: [id])
  providerId  Int
  orderId     Int?     // Reference to the completed order
  rating      Float
  comment     String?
  ratingDate  DateTime @default(now())
}

model LocationTracking {
  id          Int      @id @default(autoincrement())
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     Int
  provider    Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId  Int
  latitude    Decimal  @db.Decimal(10, 8)
  longitude   Decimal  @db.Decimal(11, 8)
  accuracy    Decimal? @db.Decimal(5, 2)
  timestamp   DateTime @default(now())
  isActive    Boolean  @default(true)

  @@index([orderId])
  @@index([providerId])
  @@index([timestamp])
  @@index([isActive])
}

model ActiveConnection {
  id           Int      @id @default(autoincrement())
  userId       Int
  userType     String   // USER or PROVIDER
  socketId     String   @unique
  order        Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      Int?
  connectedAt  DateTime @default(now())
  lastActivity DateTime @default(now())

  @@index([userId])
  @@index([userType])
  @@index([orderId])
  @@index([socketId])
  @@index([lastActivity])
}

// SMS Integration Models
model Otp {
  id          Int      @id @default(autoincrement())
  phoneNumber String
  otp         String   // Hashed OTP
  purpose     String   // login, registration, password_reset, etc.
  expiresAt   DateTime
  attempts    Int      @default(0)
  isUsed      Boolean  @default(false)
  usedAt      DateTime?
  createdAt   DateTime @default(now())

  @@index([phoneNumber])
  @@index([purpose])
  @@index([expiresAt])
  @@index([isUsed])
}

model SmsLog {
  id          Int      @id @default(autoincrement())
  phoneNumber String
  message     String
  status      String   // sent, failed, pending
  response    String?  // API response
  sentAt      DateTime @default(now())

  @@index([phoneNumber])
  @@index([status])
  @@index([sentAt])
}

// Settings Models
model SystemSettings {
  id                Int      @id @default(autoincrement())
  key               String   @unique
  value             String
  description       String?
  category          String   @default("general") // legal, social, support, ads
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model SubAdmin {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  permissions Json     // Array of permission strings
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AdBanner {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  imageUrl     String?
  linkType     String   @default("external") // external, provider
  externalLink String?
  providerId   Int?
  isActive     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  id              Int      @id @default(autoincrement())
  title           String
  message         String
  imageUrl        String?
  targetAudience  Json     // Array of strings: ["customers", "providers"]
  notificationType String  @default("general") // general, order, offer, system
  data            Json?    // Additional data for FCM payload
  status          String   @default("draft") // draft, sent, failed
  recipientsCount Int      @default(0)
  successCount    Int      @default(0)
  failureCount    Int      @default(0)
  sentAt          DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
